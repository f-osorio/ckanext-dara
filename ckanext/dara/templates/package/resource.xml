<!-- <?xml version="1.0" encoding="UTF-8"?>-->

{# dara xml for RESOURCES 
=========================
schema and example files: 
http://www.da-ra.de/en/technical-information/doi-registration/

actually generated by macros: #}
{% import 'macros/dara_metadata.xml' as macros %}


{% set pkg = h.dara_pkg() %}
{% set dara_authors = h.dara_authors('res', data) %}

{% set res = h.dara_resource() %}
{% set url = h.dara_resource_url(res.url) %}


{# {% set debug = h.dara_debug(res) %} #}

<resource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:noNamespaceSchemaLocation="doi:10.4232/10.mdsxsd.3.1">

<!-- this is a Dataset (file) -->
<resourceType>2</resourceType> 
{{ macros.resourceIdentifier(res.id, res.dara_currentVersion)}} 

{# 1. title #}
{# CKAN does not enforce a title for resources. As long as we do not have validation,
we need to make sure here, that dara gets a title #}
{% set name = res.name or 'Untitled' %}
{{ macros.titles(name, 'en') }}  

{# 2. other titles #}
{#XXX not implemented in resources 
{{ macros.otherTitles('en', pkg.dara_OtherTitle or None, pkg.dara_OtherTitleType or None) }} 
#}

{# TODO 3. collective title  #}
      
{# 4. creators  TODO: 4.2 institution #}
{#XXX for now we take the authors given in the collection here #}
<creators>  
{% for author in dara_authors %}
    {{ macros.creator(author) }}
{% endfor %}
</creators>

{# 8. URL, 9. DOI proposal #}
{{ macros.doi(url, h.res_doi(res)) }}

{# *12.publication date #}
{{ macros.publicationDate(res.dara_PublicationDate or pkg.dara_PublicationDate) }}

{# *28/29 availability controlled/free 
default is '1' (Download)
#}
{{ macros.availability(res.dara_Availabilitycontrolled or '1') }}

{# 11. resource language #}
{#XXX not implemented for resources #}
{{ macros.resourceLanguage(res.dara_language or None) }}


{# 17. description #}
{% if res.description %}
{{ macros.description(res.description) }}
{% endif %}

{# XXX controlled not implemented yet; can have multiple entries #}  
{#  18. geographic coverage controlled/free #}
{{ macros.geographicCoverages('en', res.dara_geographicCoverage or None, res.dara_geographicCoverageFree or None) }}

{# 19. sampled universe #}
{#XXX we are using 'None' as fallback since the schema is not correct here.
dara expects content, but schema does not force it #}
{{ macros.universes('en', res.dara_universeSampled or None) }}

{# 20. sampling #}
{#XXX not implemented for resources #}
{{ macros.samplings('en', res.dara_Sampling or None) }} {#XXX lang not implemented #}

{# 21. temporalCoverage #}
{{ macros.temporalCoverageFree(res.dara_temporalCoverageFree or None) }}


{# 26. Dataset, only relevant for resources #}
<dataSets>
    <dataSet>
        <language>en</language>
        {% if res.dara_numberUnits %}
            <unitType>{{ res.dara_unitType }}</unitType>
            <numberUnits>{{ res.dara_numberUnits }}</numberUnits>
        {% endif %}
        {% if res.dara_numberVariables %}
            <numberVariables>{{ res.dara_numberVariables }}</numberVariables>
        {% endif %}
        {% if res.dara_dataType %}
            <dataType>{{ res.dara_dataType }}</dataType>
        {% endif %}
        {% if res.url_type == "upload" %}
            {% set fileinfo = h.fileinfo(res) %}
            <files>
                <file>
                    <name>{{ fileinfo.filename }}</name>
                    <format>{{ res.format }}</format>
                    <size>{{ fileinfo.filesize }}</size>
                </file>
            </files>
        {% endif %}
    </dataSet>
</dataSets>



{# 27. note #}
{{ macros.note(res.dara_note) or None }}



{# 31. relation #}
{# rel type '9' indicates 'IsPartOf' and references the collection (in our case) #}
{# we need the container element here because the macro only creates single
relations since collection do need to refer to more than one resource #}
<relations>
{{ macros.relation('DOI', h.pkg_doi(pkg), 9) }}
</relations>


</resource>


